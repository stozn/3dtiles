name: Windows Build and Release

on: [push]

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      id: cache-vcpkg
      with:
        path: ./vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/build.rs') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Install dependencies on Windows
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: | 
        git clone https://github.com/microsoft/vcpkg.git 
        ./vcpkg/bootstrap-vcpkg.bat 
        ./vcpkg/vcpkg install gdal:x64-windows-release
        ./vcpkg/vcpkg install osg:x64-windows-release
        tree ./vcpkg/installed /F /A

    - name: Build
      run: cargo build --verbose --release

    - name: Package release files
      run: |
        mkdir release
        copy target\release\<your_executable_name>.exe release\
        xcopy vcpkg\installed\x64-windows\bin release /E /I /Y
        xcopy vcpkg\installed\x64-windows\debug\bin release /E /I /Y
      shell: cmd

    - name: Compress release files
      run: |
        tar -a -c -f release.zip release
      shell: cmd

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./release.zip
        asset_name: release.zip
        asset_content_type: application/zip
